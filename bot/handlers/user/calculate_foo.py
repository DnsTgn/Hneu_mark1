from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from ...database.methods.db import database
from ...handlers.user import main as user_foo
from ...keyboards import inline
from ...misc.forms import Form
from ...misc import util as valid, config, calc


async def math_question(message_or_callback):
    await Form.math_ent.set()
    text = "üìå –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä–æ—é –æ—Ç—Ä–∏–º–∞–Ω—ñ –±–∞–ª–∏ –Ω–∞ –ù–ú–¢ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –≤—ñ–¥ 100 –¥–æ 200 –±–∞–ª—ñ–≤.\n‚úÖ –ù–∞–ø—Ä–∏–∫–ª–∞–¥, <b>189</b>"

    if isinstance(message_or_callback,types.Message):
        await message_or_callback.bot.send_message(chat_id=message_or_callback.chat.id,text =text)
    if isinstance(message_or_callback,types.CallbackQuery):
        await message_or_callback.bot.send_message(chat_id=message_or_callback.message.chat.id,text=text)

async def math_answer(message:types.Message):
    valid_check = list(valid.nmt_mark_validation(message.text))
    if valid_check[0] == 1:
        DB = database()
        DB.add_mark('math',int(message.text),message.from_user.id)
        await ukr_question(message)
    elif valid_check[0] == 0:
        text = valid_check[1]
        await message.bot.send_message(chat_id=message.chat.id,text = text)


async def ukr_question(message:types.Message):
    await Form.ukr_ent.set()
    text = "üìå –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä–æ—é –æ—Ç—Ä–∏–º–∞–Ω—ñ –±–∞–ª–∏ –Ω–∞ –ù–ú–¢ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ –≤—ñ–¥ 100 –¥–æ 200 –±–∞–ª—ñ–≤.\n‚úÖ–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <b>175</b>"
    await message.bot.send_message(chat_id=message.chat.id, text=text)


async def ukr_answer(message:types.Message):
    valid_check = list(valid.nmt_mark_validation(message.text))
    if valid_check[0] == 1:
        DB = database()
        DB.add_mark('ukr',int(message.text),message.from_user.id)
        await add_subj_quest(message)
    elif valid_check[0] == 0:
        text = valid_check[1]
        await message.bot.send_message(chat_id=message.chat.id,text = text)


async def add_subj_quest(message:types.Message):
    await Form.add_subj_ch.set()
    ikb = inline.get_add_subj_ikb()
    text = "üìå –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç—Ä–µ—Ç—ñ–π –ø—Ä–µ–¥–º–µ—Ç, —è–∫–∏–π –≤–∏ —Å–∫–ª–∞–¥–∞–ª–∏:"
    await message.bot.send_message(chat_id=message.chat.id,text= text,reply_markup=ikb)

async def add_subj_answer(call:types.CallbackQuery):
    DB = database()
    DB.add_add_subj(call.data,call.from_user.id)
    await add_subj_mark_quest(call)

async def add_subj_mark_quest(call:types.CallbackQuery):
    await Form.add_ent.set()
    text = f"üìå–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä–æ—é –æ—Ç—Ä–∏–º–∞–Ω—ñ –±–∞–ª–∏ –Ω–∞ –ù–ú–¢ –∑ {config.subjects[call.data]} –≤—ñ–¥ 100 –¥–æ 200 –±–∞–ª—ñ–≤.\n‚úÖ–ù–∞–ø—Ä–∏–∫–ª–∞–¥, <b>199</b>"
    await call.bot.edit_message_text(chat_id=call.message.chat.id,message_id=call.message.message_id,text=text)

async def add_subj_mark_answer(message:types.Message):
    valid_check = list(valid.nmt_mark_validation(message.text))
    if valid_check[0] == 1:
        DB = database()
        DB.add_mark('add_subj_mark', int(message.text), message.from_user.id)
        await spec_set_question(message)
    elif valid_check[0] == 0:
        text = valid_check[1]
        await message.bot.send_message(chat_id=message.chat.id, text=text)


async def spec_set_question(message:types.Message):
    await Form.spec_set.set()
    text = "üì≤–£–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ, –¥–ª—è —è–∫–æ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—É—Ä—Å–Ω–∏–π –±–∞–ª.\n‚úÖ–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <b>073</b> –∞–±–æ <b>014.02</b> \n\nüìç–ü–æ–¥–∏–≤–∏—Ç–∏—Å—è –≤—Å—ñ –∫–æ–¥–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç–µ–π üëâ <a href = \"https://telegra.ph/PEREL%D0%86K-galuzej-znan-%D1%96-spec%D1%96alnostej-za-yakimi-zd%D1%96jsnyuyetsya-p%D1%96dgotovka-zdobuvach%D1%96v-vishchoi-osv%D1%96ti-04-18\">—Ç—É—Ç</a>"
    await message.bot.send_message(chat_id=message.chat.id,text= text,disable_web_page_preview=True)

async def spec_set_answer(message:types.Message):

    state = Dispatcher.get_current().current_state()
    check = valid.spec_validation(message.text)

    if check =="OK":
        async with state.proxy() as data:
            data['spec'] = message.text
            DB = database()
            DB.add_spec_amount(data['spec'])
        await check_spec(message)
    else:
        await message.bot.send_message(chat_id=message.chat.id,text=check)

async def check_spec(message:types.Message):
    state = Dispatcher.get_current().current_state()
    async with state.proxy() as data:
        check = valid.spec_porig_check(data['spec'])
    if check == "NO":
        pass
    else:
        text = f"‚ùóÔ∏è –ù–∞ —Ü—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å –∫–æ–Ω–∫—É—Ä—Å–Ω–∏–π –±–∞–ª –¥–ª—è –≤—Å—Ç—É–ø—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–≤–Ω–æ—ó –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å–µ—Ä–µ–¥–Ω—å–æ—ó –æ—Å–≤—ñ—Ç–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –º–µ–Ω—à–µ –Ω—ñ–∂ üëâ {check}.\n‚òùüèª–Ø–∫—â–æ —É –≤–∞—Å –∫–æ–Ω–∫—É—Ä—Å–Ω–∏–π –±–∞–ª –±—É–¥–µ –º–µ–Ω—à–∏–º, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å ü§∑‚Äç‚ôÇÔ∏è"
        await message.bot.send_message(chat_id=message.chat.id,text=text)
    await region_question(message)


async def region_question(message:types.Message):
    await Form.region_set.set()
    ikb = inline.get_regions_ikb()
    text = "üìç –î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—É –æ–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –¥–µ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–∏–π –∑–∞–∫–ª–∞–¥ –æ—Å–≤—ñ—Ç–∏ üéì—É —è–∫—ñ–π –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –≤—Å—Ç—É–ø–∏—Ç–∏"
    await message.bot.send_message(chat_id=message.chat.id,text=text,reply_markup=ikb)

async def region_answer(call:types.CallbackQuery):

    state = Dispatcher.get_current().current_state()
    async with state.proxy() as data:
        if call.data == 'reg_first_group':
            data['reg_koef'] = 1.07
        elif call.data == 'reg_second_group':
            data['reg_koef'] = 1.04
        elif call.data == 'reg_other_group':
            data['reg_koef'] = 1
        elif call.data == 'skip':
            data['reg_koef'] = 'skiped'
    await call.bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
    await calculate(call)

async def calculate(call:types.CallbackQuery):
    DB = database()
    result = DB.get_all_info(call.from_user.id)
    state = Dispatcher.get_current().current_state()
    reg = 0
    spec = str()
    async with state.proxy() as data:
        spec = data['spec']
        if data['reg_koef'] == 'skiped':
            reg = 1
        else:
            reg = float(data['reg_koef'])
    scores = {'ukr':result[2],'math':result[3],result[1]:result[4]}
    res = await calc.calc_score(reg,spec,scores)
    await print_KB(call,res,state)

async def print_KB(call:types.CallbackQuery,res,state: FSMContext):
    spec = str()
    state1 = Dispatcher.get_current().current_state()
    async with state1.proxy() as data:
        spec = data['spec']
    name = await calc.get_spec_name(spec)
    text = f"‚úÖ–ù–∞ –ø—ñ–¥—Å—Ç–∞–≤—ñ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ <i><b>'{spec} {name}'</b></i> –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º:\n\nüìç–≥–∞–ª—É–∑–µ–≤–æ–≥–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ =<b>{res[1]}</b>\n\nüìç—Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ =<b>{res[2]}</b>\n\nüëâ –í–∞—à –∫–æ–Ω–∫—É—Ä—Å–Ω–∏–π –±–∞–ª —Å—Ç–∞–Ω–æ–≤–∏—Ç—å: <b>{res[0]}</b>\n\n üôèüèª –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –ø—Ä–∏–π–º–∞–ª—å–Ω—ñ–π –∫–æ–º—ñ—Å—ñ—ó, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –Ω–µ–Ω–µ—Å–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å —É–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É.\n\nüôÉ –î—è–∫—É—î–º–æ, —â–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–ª–∏—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º! –†–æ–∑—Ä–æ–±–ª–µ–Ω–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–º –Ü–¢ —É –•–∞—Ä–∫—ñ–≤—Å—å–∫–æ–º—É –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–º—É –µ–∫–æ–Ω–æ–º—ñ—á–Ω–æ–º—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ —ñ–º–µ–Ω—ñ –°–µ–º–µ–Ω–∞ –ö—É–∑–Ω–µ—Ü—è‚ù§Ô∏èüë®‚Äçüéì"
    #tex = f"–î–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –≥–∞–ª—É–∑–µ–≤–∏–π –∫–æ–µ—Ñ ={res[1]}. –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä–µ–≥—ñ–æ–Ω—É, —Ä–µ–≥—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∫–æ–µ—Ñ ={res[2]}.\n–¢–æ–∂ –≤–∞—à –±–∞–ª —î:<b>{res[0]}</b>"
    await call.bot.send_message(chat_id=call.message.chat.id,text=text)
    await state.reset_state()
    await user_foo.menu(call)
