from  aiogram import types

from aiogram import Dispatcher, Bot
from aiogram.dispatcher import FSMContext

from ...database.methods.db import database
from ...keyboards import inline
from ...misc import config
from ...misc.forms import Form
from . import calculate_foo
async def feedback(message_or_callback):
    print("[INFO] - –í–∏–∫–ª–∏–∫–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è feedback")
    text = "–°–∫–∞–∂–∏ –Ω–∞–º —è–∫ –±—É—Ç–∏ –∫—Ä–∞—â–µ ü§∑‚Äç‚ôÇÔ∏èüòâ"
    ikb = inline.get_feedback_ikb()
    await Form.feedback.set()
    if isinstance(message_or_callback, types.Message):
        await message_or_callback.bot.send_message(chat_id=message_or_callback.chat.id, text=text,reply_markup=ikb)
    elif isinstance(message_or_callback, types.CallbackQuery):
        await message_or_callback.message.bot.send_message(chat_id=message_or_callback.message.chat.id,
                                                           text=text,reply_markup=ikb)

async def feedback_answer(message_or_callback,state: FSMContext):
    print("[INFO] - –í–∏–∫–ª–∏–∫–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è feedback_answer")
    await state.reset_state()
    if isinstance(message_or_callback, types.Message):
        text = "–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫‚ù§Ô∏è"
        await message_or_callback.bot.forward_message(chat_id=config.admin_chat_id,from_chat_id=message_or_callback.chat.id,message_id=message_or_callback.message_id)
        await message_or_callback.bot.send_message(chat_id=message_or_callback.chat.id, text=text)
    elif isinstance(message_or_callback, types.CallbackQuery):
        if message_or_callback.data == "out":
            await message_or_callback.message.bot.delete_message(chat_id=message_or_callback.message.chat.id,
                                                                 message_id=message_or_callback.message.message_id)
    await menu(message_or_callback)
async def help(message_or_callback):
    print("[INFO] - –í–∏–∫–ª–∏–∫–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è help")
    text = "üôèüèª –î—è–∫—É—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É—î—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º, —è–∫–∏–π —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–º –Ü–¢ —É <a href =\"www.hneu.edu.ua\">–•–ù–ï–£ —ñ–º–µ–Ω—ñ –°–µ–º–µ–Ω–∞ –ö—É–∑–Ω–µ—Ü—è</a>üë®‚Äçüéì‚ù§Ô∏è.\n\nüëâ –ú–µ—Ç–æ–¥–∏–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∫–æ–Ω–∫—É—Ä—Å–Ω–æ–≥–æ –±–∞–ª—É <a href = \"https://telegra.ph/Metodika-rozrahunku-04-18\">—Ç—É—Ç</a>.\n\nüì≤–Ø–∫—â–æ —î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\ntelegram: @KhNUE\nkuznets.event@gmail.com"
    if isinstance(message_or_callback,types.Message):
        await message_or_callback.bot.send_message(chat_id=message_or_callback.chat.id, text = text,disable_web_page_preview=True)
    elif isinstance(message_or_callback,types.CallbackQuery):
        await message_or_callback.message.bot.send_message(chat_id=message_or_callback.message.chat.id,
                                                           text=text,disable_web_page_preview=True)
    await menu(message_or_callback)


async def about(message_or_callback):
    print("[INFO] - –í–∏–∫–ª–∏–∫–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è about")
    text = f"–¶–µ–π –±–æ—Ç \U0001F916 —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —É –•–∞—Ä–∫—ñ–≤—Å—å–∫–æ–º—É –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–º—É –µ–∫–æ–Ω–æ–º—ñ—á–Ω–æ–º—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ —ñ–º–µ–Ω—ñ –°–µ–º–µ–Ω–∞ –ö—É–∑–Ω–µ—Ü—è \U0001F468\U0001F4BB\U0001F393. \n–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞:\n\n‚ñ´Ô∏è–ê–≤—Ç–æ—Ä—ñ —ñ–¥–µ—ó, –∫—É—Ä–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç—É —Ç–∞ Product Owner ‚Äì –ø—Ä–æ—Ä–µ–∫—Ç–æ—Ä –∑ –Ω–∞–≤—á–∞–ª—å–Ω–æ-–º–µ—Ç–æ–¥–∏—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ —Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É –ú–∞–∫—Å–∏–º –°–µ—Ä–ø—É—Ö–æ–≤ \n\n‚ñ´Ô∏èProduct Manager ‚Äì –ú–∏–∫–∏—Ç–∞ –ú–æ—Å–∫–æ–≤–∫—ñ–Ω, —Å—Ç—É–¥–µ–Ω—Ç 1 —Ä–æ–∫—É –Ω–∞–≤—á–∞–Ω–Ω—è –∑–∞ –æ—Å–≤—ñ—Ç–Ω—ñ–º —Å—Ç—É–ø–µ–Ω–µ–º ¬´–º–∞–≥—ñ—Å—Ç—Ä¬ª –ø—Ä–æ–≥—Ä–∞–º–∏ ¬´–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –Ü–¢ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç¬ª\n\n‚ñ´Ô∏èDevelopment Team:\n–¢–æ–≤–≥—ñ–Ω –î–µ–Ω–∏—Å ‚Äì —Å—Ç—É–¥–µ–Ω—Ç 2–≥–æ –∫—É—Ä—Å—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É –Ü–¢\n–©–µ—Ä–±–∞ –ù–∞—Ç–∞–ª—ñ—è - —Å—Ç—É–¥–µ–Ω—Ç–∫–∞ 2–≥–æ –∫—É—Ä—Å—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É –Ü–¢\n\n‚úÖ –î—ñ–∑–Ω–∞–≤–∞–π—Ç–µ—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –Ω–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏ –Ω–∞ <a href = \"https://www.hneu.edu.ua\">—Å–∞–π—Ç—ñ</a>.  \n–ú–∏ –Ω–∞ –∑–≤‚Äô—è–∑–∫—É @KhNUE"

    if isinstance(message_or_callback, types.Message):
        await message_or_callback.bot.send_message(chat_id=message_or_callback.chat.id, text=text,disable_web_page_preview=True)
    elif isinstance(message_or_callback, types.CallbackQuery):
        await message_or_callback.message.bot.send_message(chat_id=message_or_callback.message.chat.id,text=text,disable_web_page_preview=True  )
    await menu(message_or_callback)



    pass
async def welcome_message(message: types.Message):
    print(f"[INFO] - –í–∏–∫–ª–∏–∫–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è welcome_message, chat_id = {message.chat.id}")
    bot: Bot = message.bot
    DB = database()
    DB.add_id(message.from_user.id)
    await Form.welcome.set()
    text = "üòâ –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—É—Ä—Å–Ω–∏–π –±–∞–ª –¥–ª—è –≤—Å—Ç—É–ø—Éüò≥üìä.\n–¶–µ –¥–∞—Å—Ç—å –∑–º–æ–≥—É –æ—Ü—ñ–Ω–∏—Ç–∏ ‚òùüèª, –Ω–∞ —è–∫—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å —É –≤–∞—Å –∫—Ä–∞—â—ñ —à–∞–Ω—Å–∏ –¥–ª—è –≤—Å—Ç—É–ø—É! –¶–µ–π –±–æ—Ç —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–æ –≤ <a href = \"www.hneu.edu.ua\">–•–∞—Ä–∫—ñ–≤—Å—å–∫–æ–º—É –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ–º—É –µ–∫–æ–Ω–æ–º—ñ—á–Ω–æ–º—É —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—ñ —ñ–º–µ–Ω—ñ –°–µ–º–µ–Ω–∞ –ö—É–∑–Ω–µ—Ü—è ‚ù§Ô∏èüë®‚Äçüéì</a>"
    await bot.send_message(chat_id= message.chat.id,text =text,disable_web_page_preview=True)
    await menu(message)

async def menu(message_or_callback):
    print("[INFO] - –í–∏–∫–ª–∏–∫–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è menu")
    text = "–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É"
    ikb = inline.get_menu_ikb()
    #await state.reset_state()
    if isinstance(message_or_callback,types.Message):
        await message_or_callback.bot.send_message(chat_id= message_or_callback.chat.id,
                                                text=text,
                                                reply_markup=ikb)
    elif isinstance(message_or_callback,types.CallbackQuery):
        await message_or_callback.bot.send_message(chat_id=message_or_callback.message.chat.id,
                                                   text= text,
                                                   reply_markup=ikb)

def register_user_handlers(dp: Dispatcher):
    # message_handlers------------------------------------------------------
    dp.register_message_handler(welcome_message, commands=['start'])
    dp.register_message_handler(menu, commands=['menu'],state="*")
    dp.register_message_handler(help, commands=['help'], state="*")
    dp.register_message_handler(about, commands= ["about"], state="*")
    dp.register_message_handler(feedback, commands=['feedback'], state="*")
    dp.register_message_handler(feedback_answer,content_types=types.ContentTypes.ANY, state=Form.feedback)
    dp.register_message_handler(calculate_foo.math_question, commands=['calculate'], state="*")
    dp.register_message_handler(calculate_foo.math_answer, state=Form.math_ent)
    dp.register_message_handler(calculate_foo.ukr_answer, state=Form.ukr_ent)
    dp.register_message_handler(calculate_foo.add_subj_mark_answer, state=Form.add_ent)
    dp.register_message_handler(calculate_foo.spec_set_answer, state=Form.spec_set)

    #-----------------------------------------------------------------------

    # call_back_handlers----------------------------------------------------
    dp.register_callback_query_handler(help, lambda call: call.data =="help",state="*")
    dp.register_callback_query_handler(about, lambda call: call.data == "about", state="*")
    dp.register_callback_query_handler(feedback, lambda call: call.data == "feedback", state="*")
    dp.register_callback_query_handler(feedback_answer, lambda call: call.data == "out", state=Form.feedback)
    dp.register_callback_query_handler(calculate_foo.math_question, lambda call: call.data == "calculate", state="*")
    dp.register_callback_query_handler(calculate_foo.add_subj_answer,lambda call: call.data in ['english','physics','chemistry','biology','history'], state=Form.add_subj_ch)
    dp.register_callback_query_handler(calculate_foo.region_answer, lambda call: call.data in ['reg_first_group','reg_second_group',"reg_other_group","skip"], state=Form.region_set)
    # ----------------------------------------------------------------------

    # todo: register all user handlers
    pass

